Hands On Programming Session

• 1/22/2025



Some Python Concepts

mcmaster.ca January 22, 2025 2



Classes

• Class: A blueprint for creating objects, combining 
data (attributes) and behaviors (methods) for 
reusable and organized programming.

• Constructor: A special method (__init__) called 
automatically during object creation to initialize 
attributes.

• Instance Variable: A variable tied to an object 
instance, unique to each created object of the class.

mcmaster.ca January 22, 2025 3



Inheritance

• Inheritance: A mechanism that allows a class 
(child) to inherit attributes and methods from 
another class (parent), promoting code reuse and 
hierarchy.

• Parent Class: The class whose properties and 
methods are inherited by another class.

• Child Class: The class that inherits from the 
parent, gaining its functionality while allowing for 
extensions or overrides.

mcmaster.ca January 22, 2025 4



Decorators

• Decorators: Special functions or symbols (@) in 
Python that modify or enhance the behavior of 
functions, methods, or classes without changing 
their source code.

@property:
• Transforms a method into a read-only attribute, 

allowing access without explicit method calls.

mcmaster.ca January 22, 2025 5



Decorators

• Decorators: Special functions or symbols (@) in 
Python that modify or enhance the behavior of 
functions, methods, or classes without changing 
their source code.

• @staticmethod:
Defines a method that belongs to the class rather than 
an instance, and it doesn't access or modify 
class/instance-level attributes.

mcmaster.ca January 22, 2025 6



Context Managers

• Context Managers: A Python construct that 
manages resources when entering and 
exiting a block of code.

Why we use it?
• Automatically handles opening/closing 

resources (like files or network connections) 
even if exceptions occur.

• Keeps resource-management code clean 
and less error-prone.

mcmaster.ca January 22, 2025 7



Positional & Keyword Arguments

*args (Positional Arguments):
• Collects additional positional arguments into a tuple.

**kwargs (Keyword Arguments):
• Collects additional keyword arguments into a 

dictionary.

mcmaster.ca January 22, 2025 8



Positional & Keyword Arguments

Key Differences:

• *args handles extra positional arguments, passed 
as a tuple.

• **kwargs handles extra keyword arguments, passed 
as a dictionary.

mcmaster.ca January 22, 2025 9



PyTorch Framework

mcmaster.ca January 22, 2025 10



Dataset & DataLoader

mcmaster.ca January 22, 2025 11



Built-in Dataset Classes

mcmaster.ca January 22, 2025 12



Custom Datasets

mcmaster.ca January 22, 2025 13



Model Definition

mcmaster.ca January 22, 2025 14



Loss & Optimizer

mcmaster.ca January 22, 2025 15



Training Loop

Step by step:
• Get data: from dataloader.
• Forward pass: model(batch_data).
• Compute loss: criterion(...).
• Zero gradients: optimizer.zero_grad()
• Backward: loss.backward() calculates gradients.
• Update: optimizer.step() updates parameters.

mcmaster.ca January 22, 2025 16



HuggingFace Ecosystem

mcmaster.ca January 22, 2025 17



HuggingFace

• Platform for open-source Machine Learning
• Large hub of pretrained models and datasets
• Community-driven approach to sharing and 

collaboration
• Accessible libraries for NLP, Computer Vision, and 

beyond

mcmaster.ca January 22, 2025 18



Ecosystem

• Transformers
• Datasets
• Tokenizers
• Diffusers
• Accelerate
• PEFT (Parameter-Efficient Finetuning)
• TRL (Transformer Reinforcement Learning)

mcmaster.ca January 22, 2025 19



Transformers: Pipeline

Available Tasks:
• sentiment-analysis
• text-generation
• question-answering
• fill-mask
• Summarization
• translation

mcmaster.ca January 22, 2025 20



Load a Specific Model

mcmaster.ca January 22, 2025 21



AutoClasses

• AutoModel: Loads the base transformer model • AutoModelForMaskedLM: Loads a model with a 
without any specific head. masked language modeling head, used for tasks 

• AutoModelForSequenceClassification: Loads a like filling in missing words.
model with a classification head, suitable for tasks • AutoModelForCausalLM: Loads a model with a 
like sentiment analysis. causal language modeling head, suitable for text 

• AutoModelForTokenClassification: Loads a generation tasks.
model with a token classification head, used for • AutoModelForSeq2SeqLM: Loads a sequence-to-
tasks like named entity recognition (NER). sequence model with a language modeling head, 

• AutoModelForQuestionAnswering: Loads a used for tasks like translation and summarization.
model with a question-answering head, designed for 
extracting answers from passages.

mcmaster.ca January 22, 2025 22



Thank you!